{
  "ButtonEvent": "User interaction on buttons",
  "Draw": "Drawing modes",
  "LightsPattern": "Patterns for lights under the buttons.",
  "MMap.getNumber": "Read a number in specified format from the buffer.",
  "MMap.ioctl": "Perform ioctl(2) on the underlaying file",
  "MMap.length": "Returns the length of a Buffer object.",
  "MMap.read": "Perform read(2) on the underlaying file",
  "MMap.setNumber": "Write a number in specified format in the buffer.",
  "MMap.slice": "Read a range of bytes into a buffer.",
  "MMap.write": "Perform write(2) on the underlaying file",
  "TouchSensorEvent": "Touch sensor interactions",
  "brick.Button": "Generic button class, for device buttons and sensors.",
  "brick.Button.isPressed": "Check if button is currently pressed or not.",
  "brick.Button.onEvent": "Do something when a button or sensor is clicked, up or down.",
  "brick.Button.onEvent|param|body": "code to run when the event is raised",
  "brick.Button.wasPressed": "See if the button was pressed again since the last time you checked.",
  "brick.buttonDown": "Down button on the EV3 Brick.",
  "brick.buttonEnter": "Enter button on the EV3 Brick.",
  "brick.buttonLeft": "Left button on the EV3 Brick.",
  "brick.buttonRight": "Right button on the EV3 Brick.",
  "brick.buttonUp": "Up button on the EV3 Brick.",
  "brick.pattern": "Pattern block.",
  "brick.pattern|param|pattern": "the lights pattern to use. eg: LightsPattern.Green",
  "brick.print": "Show text on the screen.",
  "brick.print|param|text": "the text to print on the screen, eg: \"Hello world\"",
  "brick.print|param|x": "the starting position's x coordinate, eg: 0",
  "brick.print|param|y": "the starting position's x coordinate, eg: 0",
  "brick.setPixel": "Sets a pixel on or off",
  "brick.setPixel|param|on": "a value indicating if the pixel should be on or off",
  "brick.setPixel|param|x": "the starting position's x coordinate, eg: 0",
  "brick.setPixel|param|y": "the starting position's x coordinate, eg: 0",
  "brick.setStatusLight": "Set lights.",
  "brick.setStatusLight|param|pattern": "the lights pattern to use.",
  "control": "Program controls and events.",
  "control.allocateNotifyEvent": "Allocates the next user notification event",
  "control.deviceFirmwareVersion": "Determine the version of system software currently running.",
  "control.dmesg": "Write data to DMESG debugging buffer.",
  "control.mmap": "Create new file mapping in memory",
  "control.raiseEvent": "Announce that an event happened to registered handlers.",
  "control.raiseEvent|param|src": "ID of the Component that generated the event",
  "control.raiseEvent|param|value": "Component specific code indicating the cause of the event.",
  "motors.Motor.clearCount": "Clears the motor count",
  "motors.Motor.count": "Gets motor step count.",
  "motors.Motor.move": "Moves the motor by a number of degrees",
  "motors.Motor.move|param|angle": "the degrees to rotate, eg: 360",
  "motors.Motor.move|param|power": "the power from ``100`` full forward to ``-100`` full backward, eg: 50",
  "motors.Motor.power": "Sets the motor power level from ``-100`` to ``100``.",
  "motors.Motor.power|param|power": "the power from ``100`` full forward to ``-100`` full backward, eg: 50",
  "motors.Motor.reset": "Resets the motor.",
  "motors.Motor.setBrake": "Sets the automatic brake on or off when the motor is off",
  "motors.Motor.setBrake|param|brake": "a value indicating if the motor should break when off",
  "motors.Motor.setReversed": "Reverses the motor polarity",
  "motors.Motor.speed": "Gets motor actual speed.",
  "motors.Motor.stop": "Stops the motor",
  "motors.Motor.tachoCount": "Gets motor tacho count.",
  "motors.stopAllMotors": "Stops all motors",
  "output.createBuffer": "Create a new zero-initialized buffer.",
  "output.createBuffer|param|size": "number of bytes in the buffer",
  "screen.clear": "Clear screen and reset font to normal.",
  "screen.doubleIcon": "Double size of an icon.",
  "screen.drawIcon": "Draw an icon on the screen.",
  "sensors.ColorSensor.ambientLight": "Get current ambient light value from the color sensor.",
  "sensors.ColorSensor.color": "Get the current color from the color sensor.",
  "sensors.ColorSensor.onColorDetected": "Registers code to run when the given color is detected",
  "sensors.ColorSensor.onColorDetected|param|color": "the color to dtect",
  "sensors.ColorSensor.onColorDetected|param|handler": "the code to run when detected",
  "sensors.ColorSensor.reflectedLight": "Get current reflected light value from the color sensor.",
  "sensors.GyroSensor.angle": "Get the current angle from the gyroscope.",
  "sensors.GyroSensor.rate": "Get the current rotation rate from the gyroscope.",
  "sensors.InfraredSensor.on": "Registers code to run when an object is getting near.",
  "sensors.InfraredSensor.on|param|handler": "the code to run when detected",
  "sensors.InfraredSensor.proximity": "Get the promixity measured by the infrared sensor, from ``0`` (close) to ``100`` (far)",
  "sensors.InfraredSensor.remoteCommand": "Get the remote commandreceived the infrared sensor.",
  "sensors.InfraredSensor.wait": "Waits for the event to occur",
  "sensors.RemoteInfraredBeaconButton.isPressed": "Check if a remote button is currently pressed or not.",
  "sensors.RemoteInfraredBeaconButton.onEvent": "Do something when a button or sensor is clicked, up or down",
  "sensors.RemoteInfraredBeaconButton.onEvent|param|body": "code to run when the event is raised",
  "sensors.RemoteInfraredBeaconButton.wasPressed": "See if the remote button was pressed again since the last time you checked.",
  "sensors.TouchSensor.isTouched": "Check if touch sensor is touched.",
  "sensors.TouchSensor.onEvent": "Do something when a touch sensor is touched...",
  "sensors.TouchSensor.onEvent|param|body": "code to run when the event is raised",
  "sensors.UltraSonicSensor.distance": "Gets the distance from the sonar in millimeters",
  "sensors.UltraSonicSensor.on": "Registers code to run when the given color is close",
  "sensors.UltraSonicSensor.on|param|handler": "the code to run when detected",
  "sensors.UltraSonicSensor.wait": "Waits for the event to occur",
  "sensors.remoteButtonBottomLeft": "Remote bottom-left button.",
  "sensors.remoteButtonBottomRight": "Remote bottom-right button.",
  "sensors.remoteButtonCenter": "Remote beacon (center) button.",
  "sensors.remoteButtonTopLeft": "Remote top-left button.",
  "sensors.remoteButtonTopRight": "Remote top-right button.",
  "serial": "Reading and writing data over a serial connection.",
  "serial.writeDmesg": "Send DMESG debug buffer over serial."
}